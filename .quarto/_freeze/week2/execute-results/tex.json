{
  "hash": "82b3316aea6703a95836febabef07304",
  "result": {
    "markdown": "# Tabular data\n\n## Overview\n\nThis week we'll be learning about the data structures: vectors, data frames & tibbles.\n\nThen we'll be using the `dplyr` package (part of `tidyverse`) to begin manipulating tabular data.\n\nWe'll be using the `dplyr` verbs select, filter, mutate and arrange.\n\nBy the end of this week you'll be able to:\n\n1. Explore a tabular data set interactively in the console\n2. Manipulate tabular data using the functions in `dplyr`\n3. Read an external CSV or Excel file into R\n4. Find the documentation for a function or package\n5. Produce a simple scatter or bar chart in `ggplot2`\n6. Draw a simple map with `ggplot` and add points\n7. Output your work as a PDF file from RStudio\n\nBelieve it or not this small set of skills will enable you to do some very interesting exploratory data analysis (EDA)\n\n\n## Reading\n\nR for Data Science [@wickhamR4DS]:\n  - Chapter 5 - _Data transformation_\n\nR Programming for Data Science [@pengRP4DS]:\n  - Chapter 5 - _Getting Data in and out of R_\n  - Chapter 6 - _Using the readr package_\n\n## Digging deeper into the structure of a data frame\n\nWe're going to use the `starwars` dataset that is automatically loaded with the package `dplyr`. To get it you will have to make sure `dplyr` is loaded (It's one of the core `tidyverse` packages).\n\nThe first step in most analyses is to explore the data interactively in the console. The most common functions to do this are:\n\n`View(df)`\n\n`head(df)`\n\n`summary(df)`\n\n`glimpse(df)`\n\n`str(df)`\n\nYou can watch a [walk-through](https://leicester.cloud.panopto.eu/Panopto/Pages/Viewer.aspx?id=59ce1633-c156-4beb-ad77-ac5100b1d932) of the use of these functions on the starwars data.\n\nEach all the elements of each column of a data frame must be of the same type. In `starwars` there are elements of type `numeric`, `character` and list.\n\n[Here](https://leicester.cloud.panopto.eu/Panopto/Pages/Viewer.aspx?id=aa29c726-9a20-42cd-9bfa-ac5100c08749) is a demonstration of how to extract individual columns from a data frame.\n\n\n## Reading data from a tabular file\n\nThe most common way we'll be using to get data into R will be to load it from file - usually a CSV or Excel file.\n\nTo read a CSV file we will use the `read_csv` function which is part of the `readr` package loaded with `tidyverse` (There is a function `read.csv` which is part of base R, but `readr::read_csv` is better.)\n\nThere are lots of optional parameters that you can use to refine the performance of `read_csv`, but it often works fine with just the path to the file.\n\nFor example, if we have a file of the 100 most popular girl babies names in England and Wales, in a file called `GirlsNames.csv` we can import it with the following code.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(readr)\nlibrary(here)\ngirls <- read_csv(here(\"_Data\", \"GirlsNames.csv\"))\nhead(girls, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 x 3\n    Rank Name     Count\n   <dbl> <chr>    <dbl>\n 1     1 OLIVIA    3866\n 2     2 AMELIA    3546\n 3     3 ISLA      2830\n 4     4 AVA       2805\n 5     5 MIA       2368\n 6     6 ISABELLA  2297\n 7     7 GRACE     2242\n 8     8 SOPHIA    2236\n 9     9 LILY      2181\n10    10 EMILY     2150\n```\n:::\n:::\n\n\n\n(Data downloaded from the [ONS](https://www.ons.gov.uk/peoplepopulationandcommunity/birthsdeathsandmarriages/livebirths/datasets/babynamesenglandandwalesbabynamesstatisticsgirls))\n\n__Questions for you:__ Is this the most up to date list? Can you find a similar list from another country?\n\nData in Excel files can be read in similarly.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\ncities <- read_excel(here(\"_Data\", \"UK_cities.xlsx\"))\ncities %>% \n  arrange(Latitude) %>% \n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 x 4\n   City            County      Latitude Longitude\n   <chr>           <chr>          <dbl>     <dbl>\n 1 Truro           Cornwall        50.3    -5.05 \n 2 Plymouth        UK              50.4    -4.14 \n 3 Exeter          the UK          50.7    -3.53 \n 4 Bournemouth     UK              50.7    -1.90 \n 5 Eastbourne      East Sussex     50.8     0.290\n 6 Portsmouth      Hampshire       50.8    -1.09 \n 7 Worthing        West Sussex     50.8    -0.384\n 8 Brighton & Hove East Sussex     50.8    -0.153\n 9 Chichester      West Sussex     50.8    -0.779\n10 Hastings        East Sussex     50.9     0.573\n```\n:::\n:::\n\n\n\n## Documentation and help\n\nYou should get into the habit of looking at the documentation for each function the first time you use it.\n\nThe first place to look is by using the built-in help in RStudio. You can either go to the help window and use the search, or you can type \"?<function name>\" in the console. For example \"?read_csv\". (You'll usually need to have the relevant package loaded to get help, but \"??<package name>\" might produce something useful.). The help information can sometimes be a bit technical and overwhelming, but there are usually helpful examples at the end.\n\nHave a look at the help page for `read_csv` now.\n\nThe official repository for packages is called CRAN. There you will find the package documentation which always has a PDF reference document with details of all the functions in the package. You'll also often find one or more _vignettes_ which are tutorial-style documents giving an introduction to the package and maybe more detail on particular aspects.\n\nTry a web search for \"CRAN dplyr\" now and see what you can find.\n\nOf course, there is a lot of other support available online. You can try the [tidyverse site](https://www.tidyverse.org/) or [stack overflow](https://stackoverflow.com/questions/tagged/r)\n\n\n## Simple plots with ggplot\n\nNow we know how to get data into R it won't be long before you want to plot it.\n\nThere are a number of alternatives but we'll be using `ggplot`. The syntax can take a bit of getting used to, so here are a couple of simple examples.\n\nThere are three different components to making a plot in `ggplot`.\n\n  1. a data frame containing the data you want to plot\n  2. the type of plot you want\n  3. the columns containing the data to be plotted\n  \nHere's the simplest possible example using the `starwars` data. (here's a [walk-through](https://leicester.cloud.panopto.eu/Panopto/Pages/Viewer.aspx?id=14b2ce13-befd-4b27-80fc-ac5100c3ddeb))\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nplot_data <- \n  starwars %>% \n  filter(mass < 1000) # this is explained in the walk-through\n\nggplot(plot_data) + \n  geom_point(aes(x = height, y = mass, color = sex))\n```\n\n::: {.cell-output-display}\n![](week2_files/figure-pdf/w2_plot1-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nPart 1 is dealt with by passing the data frame as a parameter to `ggplot`.\n\nPart 2 is dealt with by choosing an appropriate `geom_` function.\n\nPart 3 is dealt with by the parameters to the `aes` function. Note that different geoms have different `aes` requirements. See the built in help for the particular geom.\n\nHere's another example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(plot_data) + \n  geom_bar(aes(x = sex), fill = \"skyblue\")\n```\n\n::: {.cell-output-display}\n![](week2_files/figure-pdf/w2_plot2-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nFor a quick and easy guide to producing many types of plots see the R Graphics Cookbook [@changRGC].\n\n## Question for you{.unnumbered}\n\n:::{.callout-tip collapse=\"true\"}\n## How can you add a title to a chart change the axis labels?\n\nUse `ggtitle()`, `xlab()` and `ylab()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(plot_data) + \n  geom_bar(aes(x = sex), fill = \"skyblue\") +\n  ggtitle(\"Number of Starwars characters by sex\") +\n  xlab(\"Sex\") +\n  ylab(\"Number\")\n```\n\n::: {.cell-output-display}\n![](week2_files/figure-pdf/w2_check_understanding1-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\n## Simple maps with ggplot\n\nThere's no denying that manipulating and visualizing spatial data can be very complex and most of the techniques are far beyond the scope of this course. But it's such a powerful visualization method that I thought it was important to give you a way to get started by plotting points on a simple map.\n\nIf you want to find out more about this topic I recommend Geocomputation with R [@lovelaceGR]\n\nThere are many formats for storing spatial data. In this example we use two: shapefiles and the relatively new Simple Features,\n\nShapefiles are well established, and most publishers of geographical information will make it available in this format (possibly alongside others)\n\nThe simple features format allows us to work with geographical data in the familiar form of a data frame, and to plot maps using `ggplot`. We'll need to install the `sf` package before we can get started.\n\nWe are going to use low resolution country boundary shapefiles from [here](https://hub.arcgis.com/datasets/bff789530b964a76938de17824165ceb_0/data){target=\"_blamk}. (I've already downloaded files for the UK and Ireland and put them in Blackboard.)\n\nThe first bit of code reads in two files and converts them to `sf` objects.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nIreland <- \n  st_read(here(\"_Data\", \"Ireland_Boundaries-shp\", \"Country_Boundaries.shp\"),\n          quiet = TRUE)\nUK <- \n  st_read(here(\"_Data\", \"UK_Boundaries-shp\", \"Country_Boundaries.shp\"),\n          quiet = TRUE)\n```\n:::\n\n\n\nLet's look at what's inside one of these `sf` objects.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(Ireland)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1\nColumns: 8\n$ OBJECTID_1 <int> 104\n$ OBJECTID   <int> 104\n$ name       <chr> \"Ireland\"\n$ Id         <int> 0\n$ Shape_Leng <dbl> 71.55104\n$ Shape_Le_1 <dbl> 71.55104\n$ Shape_Area <dbl> 9.443232\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((-9.46639 51...\n```\n:::\n:::\n\n\nWe can see there is only one row and 8 columns. The row contains attributes and geometry information about a single feature - crucially it contains geometry information which, in this case defines a set of polygons which make up the boundary of Ireland.\n\nSince they came from the same source, the UK file contains the same columns, so we can stick them together to create a single object which we can then plot using the `sf_geom` provided by `ggplot2`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nUK_IRL <- bind_rows(UK, Ireland)\nm <- ggplot() + geom_sf(data = UK_IRL) # We can plot m now, and add to it later.\nm\n```\n\n::: {.cell-output-display}\n![](week2_files/figure-pdf/w2_map1-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nTo demonstrate how we can add additional points to this data, we'll add the cities we listed above to the map. We'll also change the limits of the plot to zoom in on the South East of the country.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm + geom_point(data = cities, aes(x = Longitude, y = Latitude)) +\n  xlim(c(-2, 2)) +\n  ylim(c(50, 52))\n```\n\n::: {.cell-output-display}\n![](week2_files/figure-pdf/w2_map2-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nAt this scale we can see the low resolution of the boundary information.\n\n\n## Week 2 Task\n\nThe task for Week 2 can be found in the Week 2 folder on Blackboard.\n\n",
    "supporting": [
      "week2_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}