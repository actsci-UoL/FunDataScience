{"title":"APIs","markdown":{"headingText":"APIs","containsRefs":false,"markdown":"\n## Overview\n\nThis week we'll be looking at [APIs](https://en.wikipedia.org/wiki/API)\n\n## Definitions\n\n### API\n\nAn application programming interface (API) is an interface or communication protocol between different parts of a computer program intended to simplify the implementation and maintenance of software. (Wikipedia)\n\n### REST\n\nRepresentational state transfer (REST) is a software architectural style that defines a set of constraints to be used for creating Web services. (Wikipedia)\n\nSpecifically, one of the restful rules is that that you should get data (called a resource) returned when you link to a specific URL.\n\nThe URL is called a __request__ and what is sent back is called a __response__.\n\nYou can use restful APIs to send as well as receive data, but we will only look at how to get data.\n\nThe API request can be included in a program - so you don't need a user to click on a _download_ link.\n\nAnother piece of jargon is __endpoint__. This is the base url for the API. This is followed by a __path__ that points to the exact resource.\n\nFinally we can have __query parameters__. These always begin with a ? and look like:\n\n`?query1=param1&query2=param2`\n\nwhere the & separates two query/parameter pairs.\n\nLet's have an example.\n\n## Example\n\nThe endpoint for Github is: `https://api.github.com`\n\nThe path to a specific user's repos is `/users/<username>/repos`.\n\nTry copying `https://api.github.com/users/vivait/repos` into your browser...\n\nyou should see information returned in JSON.\n\nBut we want to access the data in a program, not via a browser.\n\nThe package [`httr`](https://cran.r-project.org/web/packages/httr/vignettes/quickstart.html) provides tools for HTTP, including the verb GET:\n\n\n```{r}\n#| label: w9_setup\n#| message: false\n#| warning: false\nlibrary(dplyr)\nlibrary(jsonlite)\nlibrary(httr)\n```\n\n```{r}\n#| label: w9_github_API\ngithub_api <- function(path) {\n  url <- modify_url(\"https://api.github.com\", path = path)\n  GET(url)\n}\n\nresp <- github_api(\"/users/actuarial-science/repos\")\n```\n\nWe can use `jsonlite` to parse the content of the response into a useful R object.\n\n```{r}\n#| label: w9_github_API2\nrepos <- fromJSON(content(resp, \"text\"))\n```\n\nWe can add some parameters to our query\n\n```{r}\n#| label: w9_github_API3\nresp <- github_api(\"/users/vivait/repos?sort=updated&per_page=100\")\nrepos <- fromJSON(content(resp, \"text\"))\n```\n\nIn fact, if we know the request will return JSON, we can parse it directly with `jsonlite`. (Not advised in a program.)\n\nFor example, the Github documentation says _You can issue a GET request to the root endpoint to get all the endpoint categories that the REST API v3 supports_:\n\n```{r}\n#| label: w9_github_API4\nhead(fromJSON(\"https://api.github.com\"), 10)\n```\n## Twitter example\n__NOTE the Twitter (X) API examples below, no longer work (thanks Elon)__\n\n__They will be replaced soon.__\n\n```{r}\n#| label: w9_twitter_API\n#| echo: false\n# api_key <- \"6MyqmTkgDXQ4f1zIIqIbFHtTN\"\n# api_secret_key <- \"cs7bmYI1BZg8GW0jWQuNyUYUsInYUFwycyoLCvb6Y1YpsQIXJV\"\n# access_token <- \"19681396-xMRexZy5AfoUaTqoj853bdL2Qlnzth1l9IBiaUecr\"\n# access_token_secret <- \"YMHm8Qu6yA7QSzOxBUzKOy85w4xP7W3S5JhPjwUfCeWdo\"\n# \n# bearer_token <- \"AAAAAAAAAAAAAAAAAAAAABbXVwAAAAAA%2BKEskMoej1oMFdWtVhik9cjPZRE%3DCAoSnK5mNfepHt7e6neySo55XAKXj2BPjINQONqX3tJ33Un2rD\"\n```\n\nThis code demonstrates how to use the `rtweet` package.\n\nFor more detail, see <https://cran.r-project.org/web/packages/rtweet/vignettes/intro.html>. \n\nFirst you'll need to set up a developer account with Twitter and get the access keys you need by creating a new app.\n\nFollow the instructions at: <https://cran.r-project.org/web/packages/rtweet/vignettes/auth.html>.\n\n```{r}\n#| label: w9_twitter_API2\n#| message: false\n#| warning: false\n# library(rtweet)\n# ## authenticate - insert your app name and keys below\n# token <- create_token(\n#   app = \"R camlad\",\n#   consumer_key = api_key,\n#   consumer_secret = api_secret_key,\n#   access_token = access_token,\n#   access_secret = access_token_secret)\n```\n\n### Following a hashtag\n\nWe can search for tweets including a particular hashtag.\n\n```{r}\n#| label: w9_twitter_API3\n## search for tweets using the Cardano hashtag\n# rt <- search_tweets(\"#Cardano\", n = 100, include_rts = FALSE)\n# \n# ## preview tweets data\n# rt |> select(id, text)\n```\n### Trending in Leicester\n\n```{r}\n#| label: w9_twitter_API4\n# trnds <- get_trends(\"Leicester\")\n# trnds |> \n#   select(trend, tweet_volume) |> \n#   arrange(desc(tweet_volume))\n```\n\n### Get a particular user's timeline\n\n```{r}\n#| label: w9_twitter_API5\nlibrary(stringr)\n# tmls <- get_timeline(\"leicspolice\", n = 100)\n# \n# tmls |> \n#   select(created_at, text) |> \n#   filter(str_detect(text, 'Traffic'))\n```\n\n## Accessing UK census (and other) data\n\nOur final example demonstrates the NOMIS API, which can be accessed through the `nomisr`[@nomisr] package.\n\n### A quick demonstration of using `nomisr` to extract data from the Nomis API\n\nThis example is based on the nomisr introduction [vignette](https://cran.r-project.org/web/packages/nomisr/vignettes/introduction.html)\n\n\n```{r}\n#| label: w9_nomisr_setup\n#| message: false\n#| warning: false\nlibrary(nomisr)\n```\n\nFirst, we can download information on what data is available.\n\n```{r}\n#| cache: TRUE\n#| label: w9_nomisr_info\ndata_info <- nomis_data_info()\n#head(data_info)\nglimpse(data_info)\n```\n\nThere's a lot here (`data_info` has `r nrow(data_info)` rows). To dig deeper we can search the column `description.value` or `name.value` for key words.\n\n```{r}\n#| label: w9_nomisr_name_search\npop_data_info <- \n  data_info |> \n  filter(str_detect(name.value, \"(?i)population\")) |> \n  select(id, name.value)\n\n#pop_data_info |> head()\nglimpse(pop_data_info)\n```\n\nSuppose we wanted population data for Leicester. It looks like \"NM_31_1\" might be worth investigating, so we can dig down deeper.\n\nThe data or is categorised first by \"concept\" (Read the docs at [nomis](https://www.nomisweb.co.uk/api/v01/help) if you want more details.)\n\n```{r}\n#| label: w9_nomisr_metadata\nid = \"NM_31_1\"\nnomis_get_metadata(id)\n```\n\nGEOGRAPHY looks relevant, so we explore what \"types\" are available.\n\n```{r}\n#| label: w9_nomisr_types\nnomis_get_metadata(id, \"GEOGRAPHY\", type = \"type\")\n```\nFinally, we can choose a particular type and investigate it.\n\n\n```{r}\n#| label: w9_nomisr_leics\nid |> \n  nomis_get_metadata(\"GEOGRAPHY\", type = \"TYPE446\") |> \n  filter(str_detect(label.en, \"Leicester\"))\n```\nLooks like we've found what we want!\n\n```{r}\n#| label: w9_nomisr_results\nleics_pop <- \n  nomis_get_data(id = id, time = \"latest\",\n                 geography = c(\"1870659636\", \"1870659640\"))\n\nleics_pop |> \n  select(DATE, GEOGRAPHY_NAME, SEX_NAME, AGE_NAME, MEASURES_NAME, OBS_VALUE) |> \n  head(10)\n```\n\n\n## Homework\n\nInstall the package `randNames` and, using the instructions in the package documentation register for a free API key at randomapi.com.\n\nWrite a programme to download random data  for 400 imaginary users. What is the distribution of genders and country of origin in this data.\n\n### Optional Christmas Bonus question\n\nRegister an account at Advent of Code. For the **2020** competition solve Question 2. (The key to solving this elegantly is reading the data in and wrangling it into the best format to solve the problem.)\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"week9.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.1.251","number-depth":2,"bibliography":["Z2-book.bib","Z3-packages.bib"],"biblio-style":"apalike","link-citations":"yes","description":"These are the course notes for the 2023 version of Fundamentals of Data Science </br>(MA7419 / MA3419)","theme":{"light":"flatly","dark":"darkly"}},"extensions":{"book":{"multiFile":true}}},"pdf":{"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"week9.pdf"},"language":{},"metadata":{"block-headings":true,"number-depth":2,"bibliography":["Z2-book.bib","Z3-packages.bib"],"biblio-style":"apalike","link-citations":"yes","description":"These are the course notes for the 2023 version of Fundamentals of Data Science </br>(MA7419 / MA3419)","documentclass":"scrreprt","papersize":"A4"},"extensions":{"book":{}}}}}