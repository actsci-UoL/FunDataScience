access_token = access_token,
access_secret = access_token_secret)
## search for tweets using the StormBarra hashtag
rt <- search_tweets(
"#StormBarra", n = 100, include_rts = FALSE
)
## preview tweets data
rt %>% select(screen_name, text)
api_key <- "6MyqmTkgDXQ4f1zIIqIbFHtTN"
api_secret_key <- "cs7bmYI1BZg8GW0jWQuNyUYUsInYUFwycyoLCvb6Y1YpsQIXJV"
access_token <- "19681396-xMRexZy5AfoUaTqoj853bdL2Qlnzth1l9IBiaUecr"
access_token_secret <- "YMHm8Qu6yA7QSzOxBUzKOy85w4xP7W3S5JhPjwUfCeWdo"
bearer_token <- "AAAAAAAAAAAAAAAAAAAAABbXVwAAAAAA%2BKEskMoej1oMFdWtVhik9cjPZRE%3DCAoSnK5mNfepHt7e6neySo55XAKXj2BPjINQONqX3tJ33Un2rD"
library(rtweet)
## authenticate - insert your app name and keys below
token <- create_token(
app = "R camlad",
consumer_key = api_key,
consumer_secret = api_secret_key,
access_token = access_token,
access_secret = access_token_secret)
## search for tweets using the StormBarra hashtag
rt <- search_tweets(
"#StormBarra", n = 100, include_rts = FALSE
)
## preview tweets data
rt %>% select(screen_name, text)
tmls <- get_timelines("leicspolice", n = 1000)
tmls %>%
select(created_at, text) %>%
filter(str_detect(text, 'Traffic'))
source('~/MEGA/Rprojects/MA7419_2122/Keys.R', echo=TRUE)
library(rtweet)
## authenticate - insert your app name and keys below
token <- create_token(
app = "R camlad",
consumer_key = api_key,
consumer_secret = api_secret_key,
access_token = access_token,
access_secret = access_token_secret)
## search for tweets using the StormBarra hashtag
rt <- search_tweets("#StormBarra", n = 100, include_rts = FALSE)
api_key <- "6MyqmTkgDXQ4f1zIIqIbFHtTN"
api_secret_key <- "cs7bmYI1BZg8GW0jWQuNyUYUsInYUFwycyoLCvb6Y1YpsQIXJV"
access_token <- "19681396-xMRexZy5AfoUaTqoj853bdL2Qlnzth1l9IBiaUecr"
access_token_secret <- "YMHm8Qu6yA7QSzOxBUzKOy85w4xP7W3S5JhPjwUfCeWdo"
bearer_token <- "AAAAAAAAAAAAAAAAAAAAABbXVwAAAAAA%2BKEskMoej1oMFdWtVhik9cjPZRE%3DCAoSnK5mNfepHt7e6neySo55XAKXj2BPjINQONqX3tJ33Un2rD"
library(rtweet)
## authenticate - insert your app name and keys below
token <- create_token(
app = "R camlad",
consumer_key = api_key,
consumer_secret = api_secret_key,
access_token = access_token,
access_secret = access_token_secret)
## search for tweets using the StormBarra hashtag
rt <- search_tweets("#StormBarra", n = 100, include_rts = FALSE)
lifecycle::last_lifecycle_warnings()
install.packages("tidyverse")
install.packages("bookdown")
install.packages("here")
install.packages("sf")
install.packages("rtweet")
library(tidyverse)
library(jsonlite)
library(httr)
github_api <- function(path) {
url <- modify_url("https://api.github.com", path = path)
GET(url)
}
resp <- github_api("/users/vivait/repos")
resp
vivait_repos <- fromJSON(content(resp, "text"))
resp <- github_api("/users/vivait/repos?sort=updated&per_page=100")
vivait_repos <- fromJSON(content(resp, "text"))
View(vivait_repos)
head(fromJSON("https://api.github.com"), 10)
api_key <- "6MyqmTkgDXQ4f1zIIqIbFHtTN"
api_secret_key <- "cs7bmYI1BZg8GW0jWQuNyUYUsInYUFwycyoLCvb6Y1YpsQIXJV"
access_token <- "19681396-xMRexZy5AfoUaTqoj853bdL2Qlnzth1l9IBiaUecr"
access_token_secret <- "YMHm8Qu6yA7QSzOxBUzKOy85w4xP7W3S5JhPjwUfCeWdo"
bearer_token <- "AAAAAAAAAAAAAAAAAAAAABbXVwAAAAAA%2BKEskMoej1oMFdWtVhik9cjPZRE%3DCAoSnK5mNfepHt7e6neySo55XAKXj2BPjINQONqX3tJ33Un2rD"
library(rtweet)
## authenticate - insert your app name and keys below
token <- create_token(
app = "R camlad",
consumer_key = api_key,
consumer_secret = api_secret_key,
access_token = access_token,
access_secret = access_token_secret)
## search for tweets using the StormBarra hashtag
rt <- search_tweets("#StormBarra", n = 100, include_rts = FALSE)
## preview tweets data
rt %>% select(screen_name, text)
## search for tweets using the Cardano hashtag
rt <- search_tweets("#Cardano", n = 100, include_rts = FALSE)
## preview tweets data
rt %>% select(screen_name, text)
View(rt)
## search for tweets using the Cardano hashtag
rt <- search_tweets("#Cardano", n = 100, include_rts = FALSE)
## preview tweets data
rt %>% select(id, text)
View(rt[[8]][[1]])
library(dplyr)
library(stringr)
# Split up mtcars
all_cars <- mtcars %>% arrange(wt)
big_cars <- filter(all_cars, wt > 3.5 )
little_cars <- filter(all_cars, wt <= 3.5)
# Recombine
combined_rows <- bind_rows(big_cars, little_cars) %>% arrange(wt)
# Test for equality
identical(all_cars, combined_rows)
# Split up mtcars
cars1 <- all_cars %>% select(1:4)
cars2 <- all_cars %>% select(-(1:4))
#Recombine
combined_cols <- bind_cols(cars1, cars2)
# Test for equality
identical(all_cars, combined_cols)
set.seed(123)
marks <-
tibble(ID = 1:5,
Score = round(rnorm(5, mean = 65, sd = 10), 1))
marks$ID[5] <- 25
marks
details <-
tibble( ID = 1:10,
Level = sample(c("UG", "PGT"), size = 10, replace = TRUE)) %>%
mutate(Email = str_c("stu", ID, "@univ.ac.uk"))
is.na(details$Email) <- 3
details
marks %>%
left_join(details, by = "ID")
marks %>%
right_join(details, by = "ID")
marks %>%
inner_join(details, by = "ID")
marks %>%
full_join(details, by = "ID")
details <-
details %>%
bind_rows(tibble(ID = 4, Level = "PGT", Email = "stu4@univ.ac.uk"))
marks %>%
left_join(details, by = "ID")
marks %>%
anti_join(details, by = "ID")
marks %>%
semi_join(details %>% filter(Level =="UG"), by = "ID")
mtcars
str(mtcars)
jstarwars <- toJSON(starwars, pretty = TRUE)
library(xml2)
#| label: w7_pets_xml
#| include: false
library(xml2)
library(dplyr)
my_pets <- "<pets>
<pet id = '001' species = 'dog'>
<tag>Rover</tag>
<colour>black</colour>
</pet>
<pet id = '002' species = 'cat'>
<tag>Tiddles</tag>
<colour>ginger</colour>
</pet>
<pet id = '003' species = 'dog'>
<tag>Fido</tag>
<colour>brownish</colour>
</pet>
</pets>"
#| label: w7_nav_pets
xpets <- read_xml(my_pets)
xml_name(xpets)  # The name of the root node
xml_child(xpets) # Finds the first child of the root (Rover)
xml_children(xpets) # Finds all the children of the root (Rover, Fido & Tibbles)
xml_children(xpets) |> xml_name() # The name of each child
xml_child(xpets) |> xml_siblings() # the siblings of Rover
xml_child(xpets) |> xml_parent() # The parent of Rover
xml_child(xpets) |> xml_child() # <tag> and <colour> are children of Rover
#| label: w7_find_cat
xml_find_first(xpets, '//pet[@species="cat"]') # Find the first cat
#| label: w7_find_dogs
xpets %>%
xml_find_all("//pet[@species='dog']") %>% # List the dogs' names
xml_find_all(".//tag") %>%                # Note the important .
xml_text()
#| label: w7_find_dogs2
xpets %>%
xml_find_all(".//pet[@species='dog']") %>%
xml_attr("id")
#| label: w7_pet_ids
pet_id <-
xpets %>%
xml_find_all(".//pet") %>%
xml_attr("id")
#| label: w7_pet_species
pet_species <-
xpets %>%
xml_find_all(".//pet") %>%
xml_attr("species")
#| label: w7_pet_names
pet_name <-
xpets %>%
xml_find_all(".//pet/tag") %>%
xml_text()
#| label: w7_pet_colour
pet_colour <-
xpets %>%
xml_find_all(".//pet/colour") %>%
xml_text()
#| label: w7_pet_df
dfpets <-
data.frame(ID = pet_id,
Name = pet_name,
Species = pet_species,
Colour = pet_colour)
dfpets
#| label: w7_json1
#| message: false
library(jsonlite)
jpets <- toJSON(dfpets)
jpets
#| label: w7_json2
prettify((jpets))
#| label: w7_json3
fromJSON(jpets)
#| label: w7_check_understanding1
jstarwars <- toJSON(starwars, pretty = TRUE)
#| label: w7_check_understanding2
dfstarwars <- fromJSON(jstarwars)
identical(starwars, dfstarwars)
jstarwars
starwars
dfstarwars
data(starwars)
force(starwars)
identical(starwars, dfstarwars)
View(dfstarwars)
View(starwars)
all.equal(starwars, dfstarwars)
attrs(starwars)
attributes(starwars)
attributes(dfstarwars)
class(dfstarwars)
class(starwars)
library(jsonlite)
library(httr)
#| label: w9_github_API
github_api <- function(path) {
url <- modify_url("https://api.github.com", path = path)
GET(url)
}
resp <- github_api("/users/vivait/repos")
resp
#| label: w9_github_API2
vivait_repos <- fromJSON(content(resp, "text"))
#| label: w9_github_API3
resp <- github_api("/users/vivait/repos?sort=updated&per_page=100")
vivait_repos <- fromJSON(content(resp, "text"))
#| label: w9_github_API4
head(fromJSON("https://api.github.com"), 10)
#| label: w9_twitter_API
#| echo: false
api_key <- "6MyqmTkgDXQ4f1zIIqIbFHtTN"
api_secret_key <- "cs7bmYI1BZg8GW0jWQuNyUYUsInYUFwycyoLCvb6Y1YpsQIXJV"
access_token <- "19681396-xMRexZy5AfoUaTqoj853bdL2Qlnzth1l9IBiaUecr"
access_token_secret <- "YMHm8Qu6yA7QSzOxBUzKOy85w4xP7W3S5JhPjwUfCeWdo"
bearer_token <- "AAAAAAAAAAAAAAAAAAAAABbXVwAAAAAA%2BKEskMoej1oMFdWtVhik9cjPZRE%3DCAoSnK5mNfepHt7e6neySo55XAKXj2BPjINQONqX3tJ33Un2rD"
#| label: w9_twitter_API2
#| message: false
#| warning: false
library(rtweet)
## authenticate - insert your app name and keys below
token <- create_token(
app = "R camlad",
consumer_key = api_key,
consumer_secret = api_secret_key,
access_token = access_token,
access_secret = access_token_secret)
#| label: w9_twitter_API3
## search for tweets using the Cardano hashtag
rt <- search_tweets("#Cardano", n = 100, include_rts = FALSE)
## preview tweets data
rt %>% select(id, text)
#| label: w9_twitter_API4
trnds <- get_trends("Leicester")
trnds %>%
select(trend, tweet_volume) %>%
arrange(desc(tweet_volume))
#| label: w9_twitter_API5
tmls <- get_timelines("leicspolice", n = 100)
tmls %>%
select(created_at, text) %>%
filter(str_detect(text, 'Traffic'))
library(jsonlite)
library(httr)
#| label: w9_github_API
github_api <- function(path) {
url <- modify_url("https://api.github.com", path = path)
GET(url)
}
resp <- github_api("/users/vivait/repos")
resp
#| label: w9_github_API2
vivait_repos <- fromJSON(content(resp, "text"))
#| label: w9_github_API3
resp <- github_api("/users/vivait/repos?sort=updated&per_page=100")
vivait_repos <- fromJSON(content(resp, "text"))
#| label: w9_github_API4
head(fromJSON("https://api.github.com"), 10)
#| label: w9_twitter_API
#| echo: false
api_key <- "6MyqmTkgDXQ4f1zIIqIbFHtTN"
api_secret_key <- "cs7bmYI1BZg8GW0jWQuNyUYUsInYUFwycyoLCvb6Y1YpsQIXJV"
access_token <- "19681396-xMRexZy5AfoUaTqoj853bdL2Qlnzth1l9IBiaUecr"
access_token_secret <- "YMHm8Qu6yA7QSzOxBUzKOy85w4xP7W3S5JhPjwUfCeWdo"
bearer_token <- "AAAAAAAAAAAAAAAAAAAAABbXVwAAAAAA%2BKEskMoej1oMFdWtVhik9cjPZRE%3DCAoSnK5mNfepHt7e6neySo55XAKXj2BPjINQONqX3tJ33Un2rD"
#| label: w9_twitter_API2
#| message: false
#| warning: false
library(rtweet)
## authenticate - insert your app name and keys below
token <- create_token(
app = "R camlad",
consumer_key = api_key,
consumer_secret = api_secret_key,
access_token = access_token,
access_secret = access_token_secret)
#| label: w9_twitter_API3
## search for tweets using the Cardano hashtag
rt <- search_tweets("#Cardano", n = 100, include_rts = FALSE)
## preview tweets data
rt %>% select(id, text)
#| label: w9_twitter_API4
trnds <- get_trends("Leicester")
trnds %>%
select(trend, tweet_volume) %>%
arrange(desc(tweet_volume))
#| label: w9_twitter_API5
library(stringr)
tmls <- get_timeline("leicspolice", n = 100)
tmls %>%
select(created_at, text) %>%
filter(str_detect(text, 'Traffic'))
??read.csv
??read_csv
#| label: w2_read_csv_data
#| message: FALSE
library(dplyr)
library(readr)
library(here)
girls <- read_csv(here("_Data", "GirlsNames.csv"))
head(girls, 10)
#| label: w2_read_excel_data
#| message: FALSE
library(readxl)
cities <- read_excel(here("_Data", "UK_cities.xlsx"))
cities %>%
arrange(Latitude) %>%
head(10)
#| label: w2_plot1
plot_data <-
starwars %>%
filter(mass < 1000) # this is explained in the walk-through
ggplot(plot_data) +
geom_point(aes(x = height, y = mass, color = sex))
#| label: w2_read_csv_data
#| message: FALSE
library(dplyr)
library(readr)
library(here)
girls <- read_csv(here("_Data", "GirlsNames.csv"))
head(girls, 10)
#| label: w2_read_excel_data
#| message: FALSE
library(readxl)
cities <- read_excel(here("_Data", "UK_cities.xlsx"))
cities %>%
arrange(Latitude) %>%
head(10)
#| label: w2_plot1
library(ggplot2)
plot_data <-
starwars %>%
filter(mass < 1000) # this is explained in the walk-through
ggplot(plot_data) +
geom_point(aes(x = height, y = mass, color = sex))
#| label: w2_plot2
ggplot(plot_data) +
geom_bar(aes(x = sex), fill = "skyblue")
#| label: read_sf_data
#| message: FALSE
library(sf)
Ireland <-
st_read(here("_Data", "Ireland_Boundaries-shp", "Country_Boundaries.shp"),
quiet = TRUE)
UK <-
st_read(here("_Data", "UK_Boundaries-shp", "Country_Boundaries.shp"),
quiet = TRUE)
#| label: glimpse_sf_data
glimpse(Ireland)
#| label: w2_map1
UK_IRL <- bind_rows(UK, Ireland)
m <- ggplot() + geom_sf(data = UK_IRL) # We can plot m now, and add to it later.
m
#| label: w2_map2
#| warning: FALSE
m + geom_point(data = cities, aes(x = Longitude, y = Latitude)) +
xlim(c(-2, 2)) +
ylim(c(50, 52))
#| label: w9_setup
#| message: false
#| warning: false
library(dplyr)
library(jsonlite)
library(httr)
#| label: w9_github_API
github_api <- function(path) {
url <- modify_url("https://api.github.com", path = path)
GET(url)
}
resp <- github_api("/users/vivait/repos")
resp
#| label: w9_github_API
github_api <- function(path) {
url <- modify_url("https://api.github.com", path = path)
GET(url)
}
resp <- github_api("/users/vivait/repos")
resp
cat(resp)
print(resp)
#| label: w9_github_API
github_api <- function(path) {
url <- modify_url("https://api.github.com", path = path)
GET(url)
}
resp <- github_api("/users/actsci/repos")
resp
#| label: w9_github_API
github_api <- function(path) {
url <- modify_url("https://api.github.com", path = path)
GET(url)
}
resp <- github_api("/users/actuarial-science/repos")
resp
#| label: w9_setup
#| message: false
#| warning: false
library(dplyr)
library(jsonlite)
library(httr)
library(nomisr)
data_info <- nomis_data_info()
data_info <- nomis_data_info()
library(nomisr)
data_info <- nomis_data_info()
pop_data_info <-
data_info %>%
filter(str_detect(name.value, "(?i)population")) %>%
select(id, name.value)
id = "NM_31_1"
nomis_get_metadata(id)
nomis_get_metadata(id, "GEOGRAPHY", type = "type")
nomis_data_info
data_info_query
getAnywere(data_info_query)
getAnywhere(data_info_query)
getAnywhere("data_info_query")
nomisr:::data_info_query
nomisr:::nomis_query_util
emp_by_occupation <- nomis_get_data(
id = "NM_168_1", time = "latest",
geography = "2013265925", sex = "0",
select = c(
"geography_code",
"C_OCCPUK11H_0_NAME", "obs_vAlUE"
))
View(emp_by_occupation)
emp_by_occupation %>% filter(str_detect(C_OCCPUK11H_0_NAME, "actuar"))
library(stringr)
emp_by_occupation %>% filter(str_detect(C_OCCPUK11H_0_NAME, "actuar"))
emp_by_occupation %>% filter(str_detect(C_OCCPUK11H_0_NAME, "(?i)actuar"))
data_info("NM_168_1")
nomis_data_info("NM_168_1")
x <- nomis_data_info("NM_168_1")
x
glimpse(x)
x$description.value
x$name.value
cite("nomis")
citation("nomisr")
citation()
citation('dplyr')
citation('bookdown')
options(citation.bibtex.max=999)
citation('bookdown')
citation('rstudio')
RStudio.Version()
citation('ggplot2')
citation('knitr')
citation('rmarkdown')
citation('RSQLite')
citation('bookdown')
citation('knitr')
citation('rmarkdown')
citation('tidyverse')
citation('validate')
citation('nomisr')
reticulate::repl_python()
